---
#######  Authentication setup #######

- name: Ensure Kibana group exists
  group:
    name: "{{ kibana_user }}"
    state: present
  become: true

- name: Create Kibana user
  user:
    comment: Kibana service account
    name: "{{ kibana_user }}"
    group: "{{ kibana_user }}"
    create_home: "no"
  become: true

#######  Source installation #######

- name: Determine installation directory
  set_fact:
    install_dir: "{{ '/usr/share/kibana' if install_type == 'package' else default_install_dir }}"

- name: Create installation directory
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ kibana_user }}"
    group: "{{ kibana_user }}"
  become: true
  when: install_type == "archive"

- name: Download kibana package ({{ package_url }})
  get_url:
    url: "{{ package_url }}"
    dest: "/tmp/{{ package_url | urlsplit('path') | basename }}"
    checksum: "{{ checksum_format }}:{{ package_checksum }}"
    owner: "{{ kibana_user }}"
    group: "{{ kibana_user }}"
    mode: '0775'
  register: package_tmp
  become: true
  when: install_type == "package"

- name: Download Kibana archive ({{ archive_url }})
  get_url:
    url: "{{ archive_url }}"
    dest: "/tmp/{{ archive_url | urlsplit('path') | basename }}"
    checksum: "{{ checksum_format }}:{{ archive_checksum }}"
    owner: "{{ kibana_user }}"
    group: "{{ kibana_user }}"
    mode: '0775'
  register: archive_tmp
  become: true
  when: install_type == "archive"

- name: Extract Kibana archive
  unarchive:
    src: "{{ archive_tmp.dest }}"
    dest: "{{ install_dir }}"
    creates: "{{ install_dir }}/bin"
    owner: "{{ kibana_user }}"
    group: "{{ kibana_user }}"
    mode: '0775'
    extra_opts:
      - --strip-components
      - '1'
    remote_src: true
  become: true
  when: install_type == "archive"

- name: Add installation dir to system-wide $PATH
  copy:
    dest: /etc/profile.d/custom-path.sh
    content: 'PATH=$PATH:{{ install_dir }}/bin'
  become: true
  when: install_type == "archive"
